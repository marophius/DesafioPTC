// <auto-generated />
using System;
using Desafio.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Desafio.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Desafio.Domain.Entidades.Marca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Marcas", (string)null);
                });

            modelBuilder.Entity("Desafio.Domain.Entidades.Proprietario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Documento")
                        .HasMaxLength(11)
                        .HasColumnType("INT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Documento")
                        .IsUnique();

                    b.ToTable("Proprietarios", (string)null);
                });

            modelBuilder.Entity("Desafio.Domain.Entidades.Veiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnoFabricacao")
                        .HasColumnType("int");

                    b.Property<int>("AnoModelo")
                        .HasColumnType("int");

                    b.Property<Guid>("MarcaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)");

                    b.Property<Guid>("ProprietarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quilometragem")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<int>("Renavam")
                        .HasColumnType("INT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.HasIndex("ProprietarioId");

                    b.HasIndex("Renavam")
                        .IsUnique();

                    b.ToTable("Veiculos", (string)null);
                });

            modelBuilder.Entity("Desafio.Domain.Entidades.Marca", b =>
                {
                    b.OwnsOne("Desafio.Domain.ValueObject.Nome", "Nome", b1 =>
                        {
                            b1.Property<Guid>("MarcaId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Nome");

                            b1.HasKey("MarcaId");

                            b1.HasIndex("Valor")
                                .IsUnique();

                            b1.ToTable("Marcas");

                            b1.WithOwner()
                                .HasForeignKey("MarcaId");
                        });

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Desafio.Domain.Entidades.Proprietario", b =>
                {
                    b.OwnsOne("Desafio.Domain.ValueObject.Nome", "Nome", b1 =>
                        {
                            b1.Property<Guid>("ProprietarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("VARCHAR(50)")
                                .HasColumnName("Nome");

                            b1.HasKey("ProprietarioId");

                            b1.ToTable("Proprietarios");

                            b1.WithOwner()
                                .HasForeignKey("ProprietarioId");
                        });

                    b.OwnsOne("Desafio.Domain.ValueObject.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("ProprietarioId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("VARCHAR(11)");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("VARCHAR(30)");

                            b1.Property<string>("NeighborHood")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("VARCHAR(100)");

                            b1.Property<string>("Service")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("VARCHAR(20)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(2)
                                .HasColumnType("VARCHAR(2)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("VARCHAR(100)");

                            b1.HasKey("ProprietarioId");

                            b1.ToTable("Proprietarios");

                            b1.WithOwner()
                                .HasForeignKey("ProprietarioId");
                        });

                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("Desafio.Domain.Entidades.Veiculo", b =>
                {
                    b.HasOne("Desafio.Domain.Entidades.Marca", "Marca")
                        .WithMany("Veiculos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Desafio.Domain.Entidades.Proprietario", "Proprietario")
                        .WithMany("Veiculos")
                        .HasForeignKey("ProprietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");

                    b.Navigation("Proprietario");
                });

            modelBuilder.Entity("Desafio.Domain.Entidades.Marca", b =>
                {
                    b.Navigation("Veiculos");
                });

            modelBuilder.Entity("Desafio.Domain.Entidades.Proprietario", b =>
                {
                    b.Navigation("Veiculos");
                });
#pragma warning restore 612, 618
        }
    }
}
